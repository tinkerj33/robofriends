{"version":3,"sources":["serviceWorker.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","SearchBox","React","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCHSC,EAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACtB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACI,4BAAKF,GACL,2BAAIC,MCaLK,EAlBC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAGd,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EACFR,GAAIO,EAAKP,GACTF,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,aCKzBW,EAhBG,SAAC,GAElB,IAFmBC,EAEpB,EAFoBA,aAGhB,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAU,mCACVW,KAAO,SACPC,YAAY,gBACZC,SAAUH,MCDXI,EARA,SAACC,GACb,OACI,yBAAKC,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAkBC,OAAO,UAC1DJ,EAAMK,WCkBJC,E,YAnBX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHA,E,+EAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACH,uDAEJG,KAAKX,MAAMK,a,GAhBCQ,aC6CZC,E,YAvCX,aAAc,IAAD,8BACT,+CAaJC,eAAiB,SAACC,GACV,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAb5C,EAAKZ,MAAQ,CACTlB,OAAQ,GACR4B,YAAa,IAJR,E,iFAQO,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACvB,OAAQmC,S,+BAMhC,IAAD,EACwBb,KAAKJ,MAA3BlB,EADF,EACEA,OAAO4B,EADT,EACSA,YACRQ,EAAiBpC,EAAOqC,QAAO,SAAAC,GACrC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAErD,OAAIvC,EAAOyC,OAIH,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC8C,EAAD,CAAWpC,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAQoC,OAR3B,6C,GAzBDO,IAAMnB,WCAxBoB,IAASC,OAAQ,kBAAC,EAAD,MAAQC,SAASC,eAAe,SP4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,iB","file":"static/js/main.b593e3c9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({name,email,id}) => {\n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst Cardlist =({robots}) => {\n\n    \n    return (\n        <div>\n        {\n            robots.map((user,i)=> {\n            return <Card key={i} \n                            id={user.id} \n                            name={user.name} \n                            email={user.email}\n                    />\n            })\n        }\n        </div>\n    );\n}\n\nexport default Cardlist;","import React from 'react'\n\nconst searchbox = ({searchChange}) =>\n\n{\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type = 'search' \n                placeholder='search robots' \n                onChange={searchChange}\n            />\n        </div>\n    )\n\n}\n\nexport default searchbox;","import React from 'react';\n\nconst Scroll = (props) => {\n   return (\n       <div style={{overflow:'scroll', border:'1px solid black',height:'800px'}}>\n            {props.children}\n        </div>\n       );\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\n\nclass ErrorBoundry extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError:true})\n    }\n\n    render() {\n        if(this.state.hasError){\n            return <h1>Ooops. That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React from 'react';\nimport Cardlist from '../components/Cardlist';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n\nclass App extends React.Component {\n\n    constructor(){\n        super()\n        this.state = {\n            robots: [],\n            searchfield: '',\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots: users}))\n    }\n\n    onSearchChange = (event) => {\n            this.setState({searchfield:event.target.value})\n    }\n    render() {\n        const {robots,searchfield} = this.state;\n        const filteredRobots = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })   \n        if(!robots.length){ //Same as if(robots.length===0)\n            return <h1>Loading..</h1>\n        } else {\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>robofriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>   \n                        <ErrorBoundry> \n                            <Cardlist robots={filteredRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>    \n                </div>\n            );\n        }\n   }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App'\n\nReactDOM.render( <App/>, document.getElementById('root'));\n\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}